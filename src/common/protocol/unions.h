#pragma once

// GENERATED BY go run ./tools/cmd/gen-types. DO NOT EDIT.
#include <common/protocol/enum.h>
#include <common/encoding/encoding.h>
#include <common/encoding/marshaler.h>

typedef struct {
        TransactionType Type;
        Bytes data;
} TransactionTypeUnion;

typedef union {
        TransactionTypeUnion *_u;
        struct AddCredits *_AddCredits;
        struct SendTokens *_SendTokens;
} TransactionBody;


typedef struct {
        SignatureType Type;
        Bytes data;
} SignatureTypeUnion;

typedef union {
        SignatureTypeUnion *_u;
        struct BTCLegacySignature *_BTCLegacySignature;
        struct BTCSignature *_BTCSignature;
        struct DelegatedSignature *_DelegatedSignature;
        struct ED25519Signature *_ED25519Signature;
        struct ETHSignature *_ETHSignature;
        struct InternalSignature *_InternalSignature;
        struct LegacyED25519Signature *_LegacyED25519Signature;
        struct PartitionSignature *_PartitionSignature;
        struct RCD1Signature *_RCD1Signature;
        struct ReceiptSignature *_ReceiptSignature;
        struct RemoteSignature *_RemoteSignature;
        struct SignatureSet *_SignatureSet;
} Signature;

bool TransactionBody_equal(const TransactionBody *a,const TransactionBody *b);
//bool TransactionType_equal(const TransactionType *a, const TransactionType *b);

int unmarshalerReadTransactionBody(Unmarshaler *m, TransactionBody *v);
int marshalerWriteTransactionBody(Marshaler *m, const TransactionBody *v);


bool Signature_equal(const Signature *a,const Signature *b);
//bool SignatureType_equal(const SignatureType *a, const SignatureType *b);

int unmarshalerReadSignature(Unmarshaler *m, Signature *v);
int marshalerWriteSignature(Marshaler *m, const Signature *v);


