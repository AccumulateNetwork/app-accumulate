image: docker:20-git

stages: # List of stages for jobs, and their order of execution
  - test        
  - build-firmware

services:
  - docker:dind

variables:
  LEDGER_BUILDER_IMAGE: registry.gitlab.com/accumulatenetwork/ledger/app-accumulate
  APP_VERSION: "1.0.2"
  BOLD_RED: '\e[1;31m'
  NO_COLOR: '\e[0m'
  SECTION: '\e[0K'

.builder:
  #image: ${LEDGER_BUILDER_IMAGE}
  image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest 
  before_script:
   - apk add zip wget curl git clang cmake cmocka cmocka-dev
   - function die { echo -e "${BOLD_RED}${1}${NO_COLOR}"; false; }
   - |
     function fwbuild {
        if [[ -z "${OUTPUT_PKG_NAME}" ]]; then OUTPUT_PKG_NAME="app-accumulate"; fi
        cd /builds/accumulatenetwork/ledger/app-accumulate
        rm -rf bin obj debug dep output-scan-build dist
        mkdir -p dist
        make clean; make scan-build SCAN_BUILD="scan-build -disable-checker deadcode.DeadStores"
        if [ "$(ls -A output-scan-build)" ]; then 
          zip -r dist/output-scan-build.zip output-scan-build/* 
          curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "dist/output-scan-build.zip" "${PACKAGE_REGISTRY_URL}/${APP_VERSION}/output-scan-build.zip"
          die "static analysis scan detected errors"
        fi
        cp bin/app.elf "dist/${OUTPUT_PKG_NAME}.elf"
        cp bin/app.sha256 "dist/${OUTPUT_PKG_NAME}.sha256"
        cp bin/app.hex "dist/${OUTPUT_PKG_NAME}.hex"
        cp bin/app.apdu "dist/${OUTPUT_PKG_NAME}.apdu"
        echo uploading assets to package to "${PACKAGE_REGISTRY_URL}/${APP_VERSION}/"
        curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "dist/$OUTPUT_PKG_NAME.elf" "${PACKAGE_REGISTRY_URL}/${APP_VERSION}/${OUTPUT_PKG_NAME}.elf"
        curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "dist/$OUTPUT_PKG_NAME.sha256" "${PACKAGE_REGISTRY_URL}/${APP_VERSION}/${OUTPUT_PKG_NAME}.sha256"
        curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "dist/$OUTPUT_PKG_NAME.hex" "${PACKAGE_REGISTRY_URL}/${APP_VERSION}/${OUTPUT_PKG_NAME}.hex"
        curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "dist/$OUTPUT_PKG_NAME.apdu" "${PACKAGE_REGISTRY_URL}/${APP_VERSION}/${OUTPUT_PKG_NAME}.apdu"
     }

.rules all:
  rules:
  - if: $CI_PIPELINE_SOURCE != ''

lint:
  stage: test
  extends: .builder
  script:
    - echo -e "${SECTION}section_start:`date +%s`:generate\r${SECTION}Verify code is correctly formatted"
    - find src/ -type f \( -name "*.h" -o -name "*.c" \) -exec clang-format -i {} \;
    - git diff --quiet || die "Please run clang-format on the following files\n$(git ls-files -m)"
    - echo -e "${SECTION}section_end:`date +%s`:generate\r${SECTION}"

unit-tests:
  stage: test
  extends: .builder
  script:
    - cd unit-tests
    - cmake -Bbuild -H. && make -C build
    - cd build
    - make
    - ctest . || die "one or more unit tests failed"

build-nano-s:
  stage: build-firmware
  extends: .builder
  variables:
    BOLOS_SDK: /opt/nanos-secure-sdk
    OUTPUT_PKG_NAME: app-accumulate-nano-s
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/nano-s"
  script:
    - fwbuild

build-nano-splus:
  stage: build-firmware
  extends: .builder
  variables:
    BOLOS_SDK: /opt/nanosplus-secure-sdk
    OUTPUT_PKG_NAME: app-accumulate-nano-splus
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/nano-splus"
  script:
    - fwbuild

build-nano-x:
  stage: build-firmware
  extends: .builder
  variables:
    BOLOS_SDK: /opt/nanox-secure-sdk
    OUTPUT_PKG_NAME: app-accumulate-nano-x
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/nano-x"
  script:
    - fwbuild
